import Header from '@/components/Header/Header';
import Head from 'next/head';
import { fetchData } from '../../../service/apiService';
import ResultCard from '../../../components/ResultCard/ResultCard';
import { GetServerSidePropsContext } from 'next';
import { ApiData } from '@/utils/types/types';
import PaginationContainer from '../../../components/PaginationContainer/PaginationContainer';
import SelectItemPerPage from '../../../components/select/SelectItemPerPage';
import ErrorButton from '@/components/ErrorButton/ErrorButton';
import { FC } from 'react';

export interface ResultCatalogProps {
  data: ApiData;
  pageSize: string;
  page: string;
}

const ResultCatalog: FC<ResultCatalogProps> = ({ data, pageSize, page }) => {
  return (
    <>
      <Head>
        <title>Rick and Morty</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <div className="wrap">
        <ErrorButton />
        <h1 className="main-title"> Rick and Morty API</h1>
        <div className="main-wrap">
          <Header />
          {!data?.results.length ? (
            <div>Oops, nothing is found!!!</div>
          ) : (
            <div className="section main-section">
              <h2>Serch results:</h2>
              <PaginationContainer
                cardPerPage={Number(pageSize)}
                totalCard={data?.total}
                page={page}
              />
              <SelectItemPerPage totalCard={pageSize} />
              <ul className="result-list">
                {data?.results.map((item) => (
                  <ResultCard
                    key={item.id}
                    item={item}
                  ></ResultCard>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default ResultCatalog;

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const pageUrl = context.query?.page as string;
  const page = pageUrl;
  const pageSize: string = Array.isArray(context.query.pageSize)
    ? context.query.pageSize[0] || '20'
    : context.query.pageSize || '20';
  const queryParam = context.query['search.name'] as string;
  const data = await fetchData(queryParam, page, pageSize);

  return {
    props: {
      data,
      pageSize,
      page: pageUrl,
    },
  };
}
